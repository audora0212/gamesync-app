workflows:
  android-internal:
    name: Android Internal Testing (Capacitor)
    max_build_duration: 60
    # instance_type omitted to use default allowed machine for current plan
    environment:
      groups:
        - android_keystore
        - firebase
      vars:
        WORKING_DIRECTORY: .
        ANDROID_PACKAGE_NAME: cloud.gamesync.app
    scripts:
      - name: Install tools
        script: |
          npm -v
      - name: Install dependencies
        script: |
          cd "$WORKING_DIRECTORY"
          npm ci || npm install
      - name: Add Android platform and sync
        script: |
          cd "$WORKING_DIRECTORY"
          npx cap add android || true
          echo "$FIREBASE_ANDROID_JSON" | base64 -d > android/app/google-services.json
          npx cap sync android
      - name: Build Android App Bundle
        script: |
          cd "$WORKING_DIRECTORY/android"
          ./gradlew clean bundleRelease
    artifacts:
      - android/app/build/outputs/**/*.aab
      - android/app/build/outputs/**/*.apk
    # No publishing section for Android to avoid validation error when empty

  android-debug-preview:
    name: Android debug preview (APK)
    environment:
      vars:
        WORKING_DIRECTORY: .
    scripts:
      - name: Install tools
        script: |
          npm -v
      - name: Install dependencies
        script: |
          cd "$WORKING_DIRECTORY"
          npm ci || npm install
      - name: Add Android platform and sync
        script: |
          cd "$WORKING_DIRECTORY"
          npx cap add android || true
          npx cap sync android
      - name: Prepare Android SDK path
        script: |
          cd "$WORKING_DIRECTORY/android"
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
      - name: Build Android debug APK
        script: |
          cd "$WORKING_DIRECTORY/android"
          ./gradlew assembleDebug
    artifacts:
      - android/app/build/outputs/apk/debug/app-debug.apk

  ios-testflight:
    name: iOS TestFlight (Capacitor)
    max_build_duration: 90
    # instance_type omitted to use default allowed machine for current plan
    integrations:
      app_store_connect: GameSync api
    environment:
      groups:
        - app_store_connect
        - ios_signing
      vars:
        WORKING_DIRECTORY: .
        IOS_SCHEME: App
        IOS_PROJECT: ios/App/App.xcodeproj
        IOS_WORKSPACE: ios/App/App.xcworkspace
        IOS_CONFIGURATION: Release
        IOS_PACKAGE_NAME: cloud.gamesync.app
    scripts:
      - name: Install tools
        script: |
          npm -v
      - name: Install dependencies
        script: |
          cd "$WORKING_DIRECTORY"
          npm ci || npm install
      - name: Add iOS platform and sync
        script: |
          cd "$WORKING_DIRECTORY"
          npx cap add ios || true
          mkdir -p ios/App
          if [ -n "${FIREBASE_IOS_PLIST}" ]; then
            echo "Using FIREBASE_IOS_PLIST env to create GoogleService-Info.plist"
            echo "$FIREBASE_IOS_PLIST" | base64 -d > ios/App/GoogleService-Info.plist
          elif [ -f "GoogleService-Info.plist" ]; then
            echo "Using repository GoogleService-Info.plist from working directory"
            cp GoogleService-Info.plist ios/App/GoogleService-Info.plist
          elif [ -f "ios/App/GoogleService-Info.plist" ]; then
            echo "GoogleService-Info.plist already exists, skipping copy"
          else
            echo "WARNING: GoogleService-Info.plist not provided (set FIREBASE_IOS_PLIST or place file at repo root)"
          fi
          npx cap sync ios
      - name: Configure iOS entitlements & URL scheme
        script: |
          cd "$WORKING_DIRECTORY/ios/App"
          ENT="App/App.entitlements"
          if [ ! -f "$ENT" ]; then
            /usr/libexec/PlistBuddy -c 'Save' "$ENT"
          fi
          # aps-environment
          /usr/libexec/PlistBuddy -c "Add :aps-environment string production" "$ENT" || \
          /usr/libexec/PlistBuddy -c "Set :aps-environment production" "$ENT"
          # Associated Domains
          /usr/libexec/PlistBuddy -c "Add :com.apple.developer.associated-domains array" "$ENT" || true
          /usr/libexec/PlistBuddy -c "Add :com.apple.developer.associated-domains:0 string applinks:gamesync.cloud" "$ENT" || true
          # URL Types in Info.plist
          PLIST="App/Info.plist"
          /usr/libexec/PlistBuddy -c "Add :CFBundleURLTypes array" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :CFBundleURLTypes:0 dict" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :CFBundleURLTypes:0:CFBundleURLName string cloud.gamesync.app" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :CFBundleURLTypes:0:CFBundleURLSchemes array" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :CFBundleURLTypes:0:CFBundleURLSchemes:0 string gamesync" "$PLIST" || true
      - name: Prepare code signing (fetch provisioning profiles via ASC API)
        script: |
          set -euo pipefail
          cd "$WORKING_DIRECTORY"
          # Initialize keychain for signing assets
          keychain initialize
          # Fetch signing files using UI-integrated App Store Connect credentials
          app-store-connect fetch-signing-files "${IOS_PACKAGE_NAME}" \
            --type IOS_APP_STORE \
            --create
          # Import certificates to the keychain
          keychain add-certificates
          # Apply provisioning profiles to the Xcode project/workspace
          xcode-project use-profiles
      - name: Cocoapods install
        script: |
          cd "$WORKING_DIRECTORY/ios/App"
          pod install
      - name: Build and export IPA
        script: |
          cd "$WORKING_DIRECTORY/ios"
          # Archive with automatic signing and allow provisioning updates
          xcodebuild \
            -workspace App/App.xcworkspace \
            -scheme App \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "$PWD/build/App.xcarchive" \
            archive \
            DEVELOPMENT_TEAM="$APPLE_DEVELOPER_TEAM_ID" \
            CODE_SIGN_STYLE=Automatic \
            CODE_SIGNING_ALLOWED=YES \
            -allowProvisioningUpdates
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath "$PWD/build/App.xcarchive" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$PWD/build" \
            -allowProvisioningUpdates
      - name: Cleanup keychain
        script: |
          keychain cleanup
    artifacts:
      - ios/build/*.ipa
    publishing:
      app_store_connect:
        api_key: ${APP_STORE_CONNECT_PRIVATE_KEY}
        key_id: ${APP_STORE_CONNECT_KEY_IDENTIFIER}
        issuer_id: ${APP_STORE_CONNECT_ISSUER_ID}
        submit_to_testflight: true

  ios-simulator-preview:
    name: iOS simulator preview (.app)
    environment:
      vars:
        WORKING_DIRECTORY: .
      xcode: latest
    scripts:
      - name: Install tools
        script: |
          npm -v
      - name: Install dependencies
        script: |
          cd "$WORKING_DIRECTORY"
          npm ci || npm install
      - name: Add iOS platform and sync
        script: |
          cd "$WORKING_DIRECTORY"
          npx cap add ios || true
          npx cap sync ios
      - name: Cocoapods install
        script: |
          cd "$WORKING_DIRECTORY/ios/App"
          pod install
      - name: Build .app for iOS Simulator
        script: |
          cd "$WORKING_DIRECTORY/ios"
          xcodebuild build \
            -workspace App/App.xcworkspace \
            -scheme App \
            -sdk iphonesimulator \
            -configuration Debug \
            -destination 'generic/platform=iOS Simulator'
    artifacts:
      - /Users/builder/Library/Developer/Xcode/DerivedData/**/*.app


