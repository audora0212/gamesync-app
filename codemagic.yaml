workflows:
  ios-testflight:
    name: iOS TestFlight (Capacitor)
    max_build_duration: 90
    # instance_type omitted to use default allowed machine for current plan
    integrations:
      app_store_connect: GameSync api
    environment:
      groups:
        - app_store_connect
        - ios_signing
      xcode: latest
      vars:
        WORKING_DIRECTORY: .
        IOS_SCHEME: App
        IOS_PROJECT: ios/App/App.xcodeproj
        IOS_WORKSPACE: ios/App/App.xcworkspace
        IOS_CONFIGURATION: Release
        IOS_PACKAGE_NAME: cloud.gamesync.app
        # Optional: set marketing version from environment (fallback 1.0.0)
        APP_VERSION: 1.0.2
    scripts:
      - name: Install tools
        script: |
          npm -v
      - name: Install dependencies
        script: |
          cd "$WORKING_DIRECTORY"
          npm ci || npm install
      - name: Add iOS platform and sync
        script: |
          cd "$WORKING_DIRECTORY"
          npx cap add ios || true
          mkdir -p ios/App
          if [ -n "${FIREBASE_IOS_PLIST}" ]; then
            echo "Using FIREBASE_IOS_PLIST env to create GoogleService-Info.plist"
            echo "$FIREBASE_IOS_PLIST" | base64 -d > ios/App/GoogleService-Info.plist
          elif [ -f "GoogleService-Info.plist" ]; then
            echo "Using repository GoogleService-Info.plist from working directory"
            cp GoogleService-Info.plist ios/App/GoogleService-Info.plist
          elif [ -f "ios/App/GoogleService-Info.plist" ]; then
            echo "GoogleService-Info.plist already exists, skipping copy"
          else
            echo "WARNING: GoogleService-Info.plist not provided (set FIREBASE_IOS_PLIST or place file at repo root)"
          fi
          npx cap sync ios
      - name: Replace iOS App Icon from logo_rectagle.png (internal path)
        script: |
          set -e
          cd "$WORKING_DIRECTORY"
          # Use icon bundled in gamesync-app
          SRC="public/logo_rectagle.png"
          if [ ! -f "$SRC" ]; then
            echo "ERROR: logo_rectagle.png not found in gamesync-app/public" >&2
            exit 1
          fi
          # Ensure square, opaque base icon using Pillow (pad to square with theme bg)
          python3 -m pip install --user pillow >/dev/null 2>&1 || true
          TMP_SQUARE="public/_icon_square.png"
          PYTHON_BIN="python3"
          command -v python3 >/dev/null 2>&1 || PYTHON_BIN="python"
          $PYTHON_BIN -c "import sys; from PIL import Image; src, dst = sys.argv[1], sys.argv[2]; im = Image.open(src).convert('RGBA'); w, h = im.size; size = max(w, h); bg = (11, 14, 20, 255); canvas = Image.new('RGBA', (size, size), bg); canvas.paste(im, ((size - w) // 2, (size - h) // 2), im); canvas = canvas.convert('RGB'); canvas.save(dst, format='PNG')" "$SRC" "$TMP_SQUARE"
          # Use padded square as source for all sizes
          SRC="$TMP_SQUARE"
          APPICONSET="ios/App/App/Assets.xcassets/AppIcon.appiconset"
          mkdir -p "$APPICONSET"
          gen() { size=$1; name=$2; sips -Z "$size" "$SRC" --out "$APPICONSET/$name" >/dev/null; }
          # iPhone
          gen 40  Icon-App-20x20@2x.png
          gen 60  Icon-App-20x20@3x.png
          gen 58  Icon-App-29x29@2x.png
          gen 87  Icon-App-29x29@3x.png
          gen 80  Icon-App-40x40@2x.png
          gen 120 Icon-App-40x40@3x.png
          gen 120 Icon-App-60x60@2x.png
          gen 180 Icon-App-60x60@3x.png
          # iPad
          gen 20  Icon-App-20x20@1x.png
          gen 40  Icon-App-20x20@2x-ipad.png
          gen 29  Icon-App-29x29@1x.png
          gen 58  Icon-App-29x29@2x-ipad.png
          gen 40  Icon-App-40x40@1x.png
          gen 80  Icon-App-40x40@2x-ipad.png
          gen 76  Icon-App-76x76@1x.png
          gen 152 Icon-App-76x76@2x.png
          gen 167 Icon-App-83.5x83.5@2x.png
          # App Store (ios-marketing)
          gen 1024 ItunesArtwork@2x.png
          cat > "$APPICONSET/Contents.json" << 'JSON'
          {
            "images" : [
              {"size":"20x20","idiom":"iphone","filename":"Icon-App-20x20@2x.png","scale":"2x"},
              {"size":"20x20","idiom":"iphone","filename":"Icon-App-20x20@3x.png","scale":"3x"},
              {"size":"29x29","idiom":"iphone","filename":"Icon-App-29x29@2x.png","scale":"2x"},
              {"size":"29x29","idiom":"iphone","filename":"Icon-App-29x29@3x.png","scale":"3x"},
              {"size":"40x40","idiom":"iphone","filename":"Icon-App-40x40@2x.png","scale":"2x"},
              {"size":"40x40","idiom":"iphone","filename":"Icon-App-40x40@3x.png","scale":"3x"},
              {"size":"60x60","idiom":"iphone","filename":"Icon-App-60x60@2x.png","scale":"2x"},
              {"size":"60x60","idiom":"iphone","filename":"Icon-App-60x60@3x.png","scale":"3x"},
              {"size":"20x20","idiom":"ipad","filename":"Icon-App-20x20@1x.png","scale":"1x"},
              {"size":"20x20","idiom":"ipad","filename":"Icon-App-20x20@2x-ipad.png","scale":"2x"},
              {"size":"29x29","idiom":"ipad","filename":"Icon-App-29x29@1x.png","scale":"1x"},
              {"size":"29x29","idiom":"ipad","filename":"Icon-App-29x29@2x-ipad.png","scale":"2x"},
              {"size":"40x40","idiom":"ipad","filename":"Icon-App-40x40@1x.png","scale":"1x"},
              {"size":"40x40","idiom":"ipad","filename":"Icon-App-40x40@2x-ipad.png","scale":"2x"},
              {"size":"76x76","idiom":"ipad","filename":"Icon-App-76x76@1x.png","scale":"1x"},
              {"size":"76x76","idiom":"ipad","filename":"Icon-App-76x76@2x.png","scale":"2x"},
              {"size":"83.5x83.5","idiom":"ipad","filename":"Icon-App-83.5x83.5@2x.png","scale":"2x"},
              {"size":"1024x1024","idiom":"ios-marketing","filename":"ItunesArtwork@2x.png","scale":"1x"}
            ],
            "info" : { "version" : 1, "author" : "xcode" }
          }
          JSON
      - name: Configure iOS entitlements & URL scheme
        script: |
          cd "$WORKING_DIRECTORY/ios/App"
          ENT="App/App.entitlements"
          if [ ! -f "$ENT" ]; then
            /usr/libexec/PlistBuddy -c 'Save' "$ENT"
          fi
          # aps-environment
          /usr/libexec/PlistBuddy -c "Add :aps-environment string production" "$ENT" || \
          /usr/libexec/PlistBuddy -c "Set :aps-environment production" "$ENT"
          # Associated Domains
          /usr/libexec/PlistBuddy -c "Add :com.apple.developer.associated-domains array" "$ENT" || true
          /usr/libexec/PlistBuddy -c "Add :com.apple.developer.associated-domains:0 string applinks:gamesync.cloud" "$ENT" || true
          # URL Types in Info.plist
          PLIST="App/Info.plist"
          /usr/libexec/PlistBuddy -c "Add :CFBundleURLTypes array" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :CFBundleURLTypes:0 dict" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :CFBundleURLTypes:0:CFBundleURLName string cloud.gamesync.app" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :CFBundleURLTypes:0:CFBundleURLSchemes array" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :CFBundleURLTypes:0:CFBundleURLSchemes:0 string gamesync" "$PLIST" || true
          # Background modes (remote notifications)
          /usr/libexec/PlistBuddy -c "Add :UIBackgroundModes array" "$PLIST" || true
          /usr/libexec/PlistBuddy -c "Add :UIBackgroundModes:0 string remote-notification" "$PLIST" || true
      - name: Ensure CODE_SIGN_ENTITLEMENTS is set in Xcode target
        script: |
          gem install xcodeproj --no-document || true
          cd "$WORKING_DIRECTORY/ios/App"
          ruby -e "require 'xcodeproj'; p=Xcodeproj::Project.open('App.xcodeproj'); t=p.targets.find{|t| t.name=='App'}; t.build_configurations.each{|c| c.build_settings['CODE_SIGN_ENTITLEMENTS']='App/App.entitlements'}; p.save"
      - name: Set version and build number
        script: |
          cd "$WORKING_DIRECTORY/ios/App"
          PLIST="App/Info.plist"
          # Marketing version (e.g., 1.0.0)
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${APP_VERSION}" "$PLIST" || \
          /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string ${APP_VERSION}" "$PLIST"
          # Build number from Codemagic's BUILD_NUMBER
          BNUM=${BUILD_NUMBER:-1}
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${BNUM}" "$PLIST" || \
          /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string ${BNUM}" "$PLIST"
      - name: Prepare code signing (fetch provisioning profiles via ASC API)
        script: |
          set -euo pipefail
          cd "$WORKING_DIRECTORY"
          # Initialize keychain for signing assets
          keychain initialize
          # Fetch signing files using UI-integrated App Store Connect credentials
          app-store-connect fetch-signing-files "${IOS_PACKAGE_NAME}" \
            --type IOS_APP_STORE \
            --create
          # Import certificates to the keychain
          keychain add-certificates
          # Apply provisioning profiles to the Xcode project/workspace
          xcode-project use-profiles
      - name: Cocoapods install
        script: |
          cd "$WORKING_DIRECTORY/ios/App"
          pod install
      - name: Build and export IPA
        script: |
          cd "$WORKING_DIRECTORY/ios"
          # Archive with automatic signing and allow provisioning updates
          xcodebuild \
            -workspace App/App.xcworkspace \
            -scheme App \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "$PWD/build/App.xcarchive" \
            archive \
            DEVELOPMENT_TEAM="$APPLE_DEVELOPER_TEAM_ID" \
            CODE_SIGNING_ALLOWED=YES \
            -allowProvisioningUpdates
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath "$PWD/build/App.xcarchive" \
            -exportOptionsPlist /Users/builder/export_options.plist \
            -exportPath "$PWD/build" \
            -allowProvisioningUpdates
      - name: Lock keychain
        script: |
          keychain lock
    artifacts:
      - ios/build/*.ipa
    publishing:
      app_store_connect:
        api_key: ${APP_STORE_CONNECT_PRIVATE_KEY}
        key_id: ${APP_STORE_CONNECT_KEY_IDENTIFIER}
        issuer_id: ${APP_STORE_CONNECT_ISSUER_ID}
        submit_to_testflight: true

  ios-simulator-preview:
    name: iOS simulator preview (.app)
    environment:
      vars:
        WORKING_DIRECTORY: .
      xcode: latest
    scripts:
      - name: Install tools
        script: |
          npm -v
      - name: Install dependencies
        script: |
          cd "$WORKING_DIRECTORY"
          npm ci || npm install
      - name: Add iOS platform and sync
        script: |
          cd "$WORKING_DIRECTORY"
          npx cap add ios || true
          npx cap sync ios
      - name: Cocoapods install
        script: |
          cd "$WORKING_DIRECTORY/ios/App"
          pod install
      - name: Build .app for iOS Simulator
        script: |
          cd "$WORKING_DIRECTORY/ios"
          xcodebuild build \
            -workspace App/App.xcworkspace \
            -scheme App \
            -sdk iphonesimulator \
            -configuration Debug \
            -destination 'generic/platform=iOS Simulator'
    artifacts:
      - /Users/builder/Library/Developer/Xcode/DerivedData/**/*.app


